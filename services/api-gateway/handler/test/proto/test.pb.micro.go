// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: handler/test/proto/test.proto

package testp

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Test service

func NewTestEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "Test.PutTest",
			Path:    []string{"/put"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Test.GetTest",
			Path:    []string{"/get"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Test.DeleteTest",
			Path:    []string{"/delete"},
			Method:  []string{"DELETE"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Test.PostTest",
			Path:    []string{"/post"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Test.StreamTest",
			Path:    []string{"/stream/{gid}"},
			Method:  []string{"GET"},
			Stream:  true,
			Handler: "rpc",
		},
	}
}

// Client API for Test service

type TestService interface {
	PutTest(ctx context.Context, in *TestMessage, opts ...client.CallOption) (*Empty, error)
	GetTest(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error)
	DeleteTest(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error)
	PostTest(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error)
	StreamTest(ctx context.Context, in *TestMessage, opts ...client.CallOption) (Test_StreamTestService, error)
}

type testService struct {
	c    client.Client
	name string
}

func NewTestService(name string, c client.Client) TestService {
	return &testService{
		c:    c,
		name: name,
	}
}

func (c *testService) PutTest(ctx context.Context, in *TestMessage, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Test.PutTest", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testService) GetTest(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Test.GetTest", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testService) DeleteTest(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Test.DeleteTest", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testService) PostTest(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Test.PostTest", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testService) StreamTest(ctx context.Context, in *TestMessage, opts ...client.CallOption) (Test_StreamTestService, error) {
	req := c.c.NewRequest(c.name, "Test.StreamTest", &TestMessage{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &testServiceStreamTest{stream}, nil
}

type Test_StreamTestService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*TestMessage, error)
}

type testServiceStreamTest struct {
	stream client.Stream
}

func (x *testServiceStreamTest) Close() error {
	return x.stream.Close()
}

func (x *testServiceStreamTest) Context() context.Context {
	return x.stream.Context()
}

func (x *testServiceStreamTest) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *testServiceStreamTest) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *testServiceStreamTest) Recv() (*TestMessage, error) {
	m := new(TestMessage)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Test service

type TestHandler interface {
	PutTest(context.Context, *TestMessage, *Empty) error
	GetTest(context.Context, *Empty, *Empty) error
	DeleteTest(context.Context, *Empty, *Empty) error
	PostTest(context.Context, *Empty, *Empty) error
	StreamTest(context.Context, *TestMessage, Test_StreamTestStream) error
}

func RegisterTestHandler(s server.Server, hdlr TestHandler, opts ...server.HandlerOption) error {
	type test interface {
		PutTest(ctx context.Context, in *TestMessage, out *Empty) error
		GetTest(ctx context.Context, in *Empty, out *Empty) error
		DeleteTest(ctx context.Context, in *Empty, out *Empty) error
		PostTest(ctx context.Context, in *Empty, out *Empty) error
		StreamTest(ctx context.Context, stream server.Stream) error
	}
	type Test struct {
		test
	}
	h := &testHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Test.PutTest",
		Path:    []string{"/put"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Test.GetTest",
		Path:    []string{"/get"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Test.DeleteTest",
		Path:    []string{"/delete"},
		Method:  []string{"DELETE"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Test.PostTest",
		Path:    []string{"/post"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Test.StreamTest",
		Path:    []string{"/stream/{gid}"},
		Method:  []string{"GET"},
		Stream:  true,
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&Test{h}, opts...))
}

type testHandler struct {
	TestHandler
}

func (h *testHandler) PutTest(ctx context.Context, in *TestMessage, out *Empty) error {
	return h.TestHandler.PutTest(ctx, in, out)
}

func (h *testHandler) GetTest(ctx context.Context, in *Empty, out *Empty) error {
	return h.TestHandler.GetTest(ctx, in, out)
}

func (h *testHandler) DeleteTest(ctx context.Context, in *Empty, out *Empty) error {
	return h.TestHandler.DeleteTest(ctx, in, out)
}

func (h *testHandler) PostTest(ctx context.Context, in *Empty, out *Empty) error {
	return h.TestHandler.PostTest(ctx, in, out)
}

func (h *testHandler) StreamTest(ctx context.Context, stream server.Stream) error {
	m := new(TestMessage)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.TestHandler.StreamTest(ctx, m, &testStreamTestStream{stream})
}

type Test_StreamTestStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*TestMessage) error
}

type testStreamTestStream struct {
	stream server.Stream
}

func (x *testStreamTestStream) Close() error {
	return x.stream.Close()
}

func (x *testStreamTestStream) Context() context.Context {
	return x.stream.Context()
}

func (x *testStreamTestStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *testStreamTestStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *testStreamTestStream) Send(m *TestMessage) error {
	return x.stream.Send(m)
}
