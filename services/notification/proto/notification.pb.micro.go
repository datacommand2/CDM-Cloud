// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/notification.proto

package notification

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Notification service

func NewNotificationEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "Notification.GetEvent",
			Path:    []string{"/notification/events/{event_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Notification.GetEvents",
			Path:    []string{"/notification/events"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Notification.GetEventsStream",
			Path:    []string{"/notification/monitor"},
			Method:  []string{"GET"},
			Stream:  true,
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Notification.GetEventClassifications",
			Path:    []string{"/notification/event-classifications"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Notification.GetTenantEventReceives",
			Path:    []string{"/notification/config/receivers/tenant"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Notification.SetTenantEventReceives",
			Path:    []string{"/notification/config/receivers/tenant"},
			Method:  []string{"PATCH"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Notification.GetUserEventReceives",
			Path:    []string{"/notification/config/receivers/user"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Notification.SetUserEventReceives",
			Path:    []string{"/notification/config/receivers/user"},
			Method:  []string{"PATCH"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Notification.ResetUserEventReceives",
			Path:    []string{"/notification/config/receivers/user-reset"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Notification.GetConfig",
			Path:    []string{"/notification/config"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Notification.SetConfig",
			Path:    []string{"/notification/config"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for Notification service

type NotificationService interface {
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...client.CallOption) (*GetEventResponse, error)
	GetEvents(ctx context.Context, in *GetEventsRequest, opts ...client.CallOption) (*GetEventsResponse, error)
	GetEventsStream(ctx context.Context, in *GetEventsStreamRequest, opts ...client.CallOption) (Notification_GetEventsStreamService, error)
	GetEventClassifications(ctx context.Context, in *Empty, opts ...client.CallOption) (*GetEventClassificationsResponse, error)
	GetTenantEventReceives(ctx context.Context, in *GetEventReceivesRequest, opts ...client.CallOption) (*EventReceivesResponse, error)
	SetTenantEventReceives(ctx context.Context, in *EventReceivesRequest, opts ...client.CallOption) (*MessageResponse, error)
	GetUserEventReceives(ctx context.Context, in *GetEventReceivesRequest, opts ...client.CallOption) (*EventReceivesResponse, error)
	SetUserEventReceives(ctx context.Context, in *EventReceivesRequest, opts ...client.CallOption) (*MessageResponse, error)
	ResetUserEventReceives(ctx context.Context, in *Empty, opts ...client.CallOption) (*MessageResponse, error)
	GetConfig(ctx context.Context, in *Empty, opts ...client.CallOption) (*GetConfigResponse, error)
	SetConfig(ctx context.Context, in *SetConfigRequest, opts ...client.CallOption) (*GetConfigResponse, error)
}

type notificationService struct {
	c    client.Client
	name string
}

func NewNotificationService(name string, c client.Client) NotificationService {
	return &notificationService{
		c:    c,
		name: name,
	}
}

func (c *notificationService) GetEvent(ctx context.Context, in *GetEventRequest, opts ...client.CallOption) (*GetEventResponse, error) {
	req := c.c.NewRequest(c.name, "Notification.GetEvent", in)
	out := new(GetEventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationService) GetEvents(ctx context.Context, in *GetEventsRequest, opts ...client.CallOption) (*GetEventsResponse, error) {
	req := c.c.NewRequest(c.name, "Notification.GetEvents", in)
	out := new(GetEventsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationService) GetEventsStream(ctx context.Context, in *GetEventsStreamRequest, opts ...client.CallOption) (Notification_GetEventsStreamService, error) {
	req := c.c.NewRequest(c.name, "Notification.GetEventsStream", &GetEventsStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &notificationServiceGetEventsStream{stream}, nil
}

type Notification_GetEventsStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*GetEventsStreamResponse, error)
}

type notificationServiceGetEventsStream struct {
	stream client.Stream
}

func (x *notificationServiceGetEventsStream) Close() error {
	return x.stream.Close()
}

func (x *notificationServiceGetEventsStream) Context() context.Context {
	return x.stream.Context()
}

func (x *notificationServiceGetEventsStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *notificationServiceGetEventsStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *notificationServiceGetEventsStream) Recv() (*GetEventsStreamResponse, error) {
	m := new(GetEventsStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notificationService) GetEventClassifications(ctx context.Context, in *Empty, opts ...client.CallOption) (*GetEventClassificationsResponse, error) {
	req := c.c.NewRequest(c.name, "Notification.GetEventClassifications", in)
	out := new(GetEventClassificationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationService) GetTenantEventReceives(ctx context.Context, in *GetEventReceivesRequest, opts ...client.CallOption) (*EventReceivesResponse, error) {
	req := c.c.NewRequest(c.name, "Notification.GetTenantEventReceives", in)
	out := new(EventReceivesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationService) SetTenantEventReceives(ctx context.Context, in *EventReceivesRequest, opts ...client.CallOption) (*MessageResponse, error) {
	req := c.c.NewRequest(c.name, "Notification.SetTenantEventReceives", in)
	out := new(MessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationService) GetUserEventReceives(ctx context.Context, in *GetEventReceivesRequest, opts ...client.CallOption) (*EventReceivesResponse, error) {
	req := c.c.NewRequest(c.name, "Notification.GetUserEventReceives", in)
	out := new(EventReceivesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationService) SetUserEventReceives(ctx context.Context, in *EventReceivesRequest, opts ...client.CallOption) (*MessageResponse, error) {
	req := c.c.NewRequest(c.name, "Notification.SetUserEventReceives", in)
	out := new(MessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationService) ResetUserEventReceives(ctx context.Context, in *Empty, opts ...client.CallOption) (*MessageResponse, error) {
	req := c.c.NewRequest(c.name, "Notification.ResetUserEventReceives", in)
	out := new(MessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationService) GetConfig(ctx context.Context, in *Empty, opts ...client.CallOption) (*GetConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Notification.GetConfig", in)
	out := new(GetConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationService) SetConfig(ctx context.Context, in *SetConfigRequest, opts ...client.CallOption) (*GetConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Notification.SetConfig", in)
	out := new(GetConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Notification service

type NotificationHandler interface {
	GetEvent(context.Context, *GetEventRequest, *GetEventResponse) error
	GetEvents(context.Context, *GetEventsRequest, *GetEventsResponse) error
	GetEventsStream(context.Context, *GetEventsStreamRequest, Notification_GetEventsStreamStream) error
	GetEventClassifications(context.Context, *Empty, *GetEventClassificationsResponse) error
	GetTenantEventReceives(context.Context, *GetEventReceivesRequest, *EventReceivesResponse) error
	SetTenantEventReceives(context.Context, *EventReceivesRequest, *MessageResponse) error
	GetUserEventReceives(context.Context, *GetEventReceivesRequest, *EventReceivesResponse) error
	SetUserEventReceives(context.Context, *EventReceivesRequest, *MessageResponse) error
	ResetUserEventReceives(context.Context, *Empty, *MessageResponse) error
	GetConfig(context.Context, *Empty, *GetConfigResponse) error
	SetConfig(context.Context, *SetConfigRequest, *GetConfigResponse) error
}

func RegisterNotificationHandler(s server.Server, hdlr NotificationHandler, opts ...server.HandlerOption) error {
	type notification interface {
		GetEvent(ctx context.Context, in *GetEventRequest, out *GetEventResponse) error
		GetEvents(ctx context.Context, in *GetEventsRequest, out *GetEventsResponse) error
		GetEventsStream(ctx context.Context, stream server.Stream) error
		GetEventClassifications(ctx context.Context, in *Empty, out *GetEventClassificationsResponse) error
		GetTenantEventReceives(ctx context.Context, in *GetEventReceivesRequest, out *EventReceivesResponse) error
		SetTenantEventReceives(ctx context.Context, in *EventReceivesRequest, out *MessageResponse) error
		GetUserEventReceives(ctx context.Context, in *GetEventReceivesRequest, out *EventReceivesResponse) error
		SetUserEventReceives(ctx context.Context, in *EventReceivesRequest, out *MessageResponse) error
		ResetUserEventReceives(ctx context.Context, in *Empty, out *MessageResponse) error
		GetConfig(ctx context.Context, in *Empty, out *GetConfigResponse) error
		SetConfig(ctx context.Context, in *SetConfigRequest, out *GetConfigResponse) error
	}
	type Notification struct {
		notification
	}
	h := &notificationHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Notification.GetEvent",
		Path:    []string{"/notification/events/{event_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Notification.GetEvents",
		Path:    []string{"/notification/events"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Notification.GetEventsStream",
		Path:    []string{"/notification/monitor"},
		Method:  []string{"GET"},
		Stream:  true,
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Notification.GetEventClassifications",
		Path:    []string{"/notification/event-classifications"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Notification.GetTenantEventReceives",
		Path:    []string{"/notification/config/receivers/tenant"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Notification.SetTenantEventReceives",
		Path:    []string{"/notification/config/receivers/tenant"},
		Method:  []string{"PATCH"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Notification.GetUserEventReceives",
		Path:    []string{"/notification/config/receivers/user"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Notification.SetUserEventReceives",
		Path:    []string{"/notification/config/receivers/user"},
		Method:  []string{"PATCH"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Notification.ResetUserEventReceives",
		Path:    []string{"/notification/config/receivers/user-reset"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Notification.GetConfig",
		Path:    []string{"/notification/config"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Notification.SetConfig",
		Path:    []string{"/notification/config"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&Notification{h}, opts...))
}

type notificationHandler struct {
	NotificationHandler
}

func (h *notificationHandler) GetEvent(ctx context.Context, in *GetEventRequest, out *GetEventResponse) error {
	return h.NotificationHandler.GetEvent(ctx, in, out)
}

func (h *notificationHandler) GetEvents(ctx context.Context, in *GetEventsRequest, out *GetEventsResponse) error {
	return h.NotificationHandler.GetEvents(ctx, in, out)
}

func (h *notificationHandler) GetEventsStream(ctx context.Context, stream server.Stream) error {
	m := new(GetEventsStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.NotificationHandler.GetEventsStream(ctx, m, &notificationGetEventsStreamStream{stream})
}

type Notification_GetEventsStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*GetEventsStreamResponse) error
}

type notificationGetEventsStreamStream struct {
	stream server.Stream
}

func (x *notificationGetEventsStreamStream) Close() error {
	return x.stream.Close()
}

func (x *notificationGetEventsStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *notificationGetEventsStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *notificationGetEventsStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *notificationGetEventsStreamStream) Send(m *GetEventsStreamResponse) error {
	return x.stream.Send(m)
}

func (h *notificationHandler) GetEventClassifications(ctx context.Context, in *Empty, out *GetEventClassificationsResponse) error {
	return h.NotificationHandler.GetEventClassifications(ctx, in, out)
}

func (h *notificationHandler) GetTenantEventReceives(ctx context.Context, in *GetEventReceivesRequest, out *EventReceivesResponse) error {
	return h.NotificationHandler.GetTenantEventReceives(ctx, in, out)
}

func (h *notificationHandler) SetTenantEventReceives(ctx context.Context, in *EventReceivesRequest, out *MessageResponse) error {
	return h.NotificationHandler.SetTenantEventReceives(ctx, in, out)
}

func (h *notificationHandler) GetUserEventReceives(ctx context.Context, in *GetEventReceivesRequest, out *EventReceivesResponse) error {
	return h.NotificationHandler.GetUserEventReceives(ctx, in, out)
}

func (h *notificationHandler) SetUserEventReceives(ctx context.Context, in *EventReceivesRequest, out *MessageResponse) error {
	return h.NotificationHandler.SetUserEventReceives(ctx, in, out)
}

func (h *notificationHandler) ResetUserEventReceives(ctx context.Context, in *Empty, out *MessageResponse) error {
	return h.NotificationHandler.ResetUserEventReceives(ctx, in, out)
}

func (h *notificationHandler) GetConfig(ctx context.Context, in *Empty, out *GetConfigResponse) error {
	return h.NotificationHandler.GetConfig(ctx, in, out)
}

func (h *notificationHandler) SetConfig(ctx context.Context, in *SetConfigRequest, out *GetConfigResponse) error {
	return h.NotificationHandler.SetConfig(ctx, in, out)
}
